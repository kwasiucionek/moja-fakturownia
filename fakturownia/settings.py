"""
Django settings for fakturownia project - PRODUCTION READY with django-environ

Generated by 'django-admin startproject' using Django 5.2.3.
Updated for production deployment with security best practices.
"""

from pathlib import Path
import os
import environ
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# =============================================================================
# DJANGO-ENVIRON SETUP
# =============================================================================

# Initialize environ
env = environ.Env(
    # Set casting and default values
    DEBUG=(bool, False),
    ALLOWED_HOSTS=(list, []),
    SECRET_KEY=(str, ''),
    
    # Security settings
    SECURE_SSL_REDIRECT=(bool, True),
    SECURE_HSTS_SECONDS=(int, 31536000),
    SECURE_HSTS_INCLUDE_SUBDOMAINS=(bool, True),
    SECURE_HSTS_PRELOAD=(bool, True),
    SECURE_CONTENT_TYPE_NOSNIFF=(bool, True),
    SECURE_BROWSER_XSS_FILTER=(bool, True),
    SECURE_REFERRER_POLICY=(str, 'strict-origin-when-cross-origin'),
    SECURE_PROXY_SSL_HEADER=(bool, True),
    
    # Cookies
    SESSION_COOKIE_SECURE=(bool, True),
    CSRF_COOKIE_SECURE=(bool, True),
    SESSION_COOKIE_AGE=(int, 28800),
    CSRF_TRUSTED_ORIGINS=(list, []),
    
    # Database
    DB_SSLMODE=(str, 'require'),
    DB_CONN_MAX_AGE=(int, 600),
    DB_CONN_HEALTH_CHECKS=(bool, True),
    
    # Email
    EMAIL_PORT=(int, 587),
    EMAIL_USE_TLS=(bool, True),
    EMAIL_USE_SSL=(bool, False),
    EMAIL_TIMEOUT=(int, 30),
    
    # Cache
    CACHE_KEY_PREFIX=(str, 'fakturownia_prod'),
    CACHE_TIMEOUT=(int, 300),
    
    # Files
    FILE_UPLOAD_MAX_MEMORY_SIZE=(int, 5242880),  # 5MB
    DATA_UPLOAD_MAX_MEMORY_SIZE=(int, 5242880),  # 5MB
    DATA_UPLOAD_MAX_NUMBER_FIELDS=(int, 100),
    WHITENOISE_MAX_AGE=(int, 31536000),
    
    # Security
    RATELIMIT_ENABLE=(bool, True),
    SECURITY_MAX_REQUESTS_PER_MINUTE=(int, 60),
    SECURITY_MAX_FAILED_LOGINS=(int, 5),
    SECURITY_BLOCK_DURATION=(int, 300),
    SECURITY_IP_WHITELIST=(list, ['127.0.0.1', '::1']),
    SECURITY_MAX_CONTENT_LENGTH=(int, 10485760),  # 10MB
    
    # Admin
    ADMIN_URL=(str, 'admin/'),
    ADMIN_IP_WHITELIST=(list, []),
    
    # Auth
    ACCOUNT_EMAIL_VERIFICATION=(str, 'mandatory'),
    ACCOUNT_EMAIL_REQUIRED=(bool, True),
    ACCOUNT_LOGIN_ATTEMPTS_LIMIT=(int, 5),
    ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT=(int, 300),
    ACCOUNT_PASSWORD_MIN_LENGTH=(int, 14),
    AUTH_PASSWORD_MIN_LENGTH=(int, 14),
    
    # CORS
    CORS_ALLOWED_ORIGINS=(list, []),
    CORS_ALLOW_CREDENTIALS=(bool, False),
    
    # Logging
    LOG_LEVEL=(str, 'WARNING'),
    
    # Monitoring
    SENTRY_ENVIRONMENT=(str, 'production'),
    SENTRY_TRACES_SAMPLE_RATE=(float, 0.1),
    SENTRY_PROFILES_SAMPLE_RATE=(float, 0.1),
    
    # Health Check
    HEALTH_CHECK_DISK_USAGE_MAX=(int, 90),
    HEALTH_CHECK_MEMORY_MIN=(int, 100),
    
    # App specific
    INVOICE_NUMBER_FORMAT=(str, 'F/{id}/{month}/{year}'),
    DEFAULT_PAYMENT_DAYS=(int, 14),
    MAX_INVOICE_PDF_SIZE=(int, 10),
    
    # Localization
    LANGUAGE_CODE=(str, 'pl'),
    TIME_ZONE=(str, 'Europe/Warsaw'),
    
    # Additional
    ENVIRONMENT=(str, 'production'),
    VERSION=(str, '1.0.0'),
    ENABLE_API=(bool, False),
    USE_GOOGLE_FONTS_CDN=(bool, False),
    
    # CSP
    CSP_DEFAULT_SRC=(list, ["'self'"]),
    CSP_SCRIPT_SRC=(list, ["'self'", "'unsafe-inline'"]),
    CSP_STYLE_SRC=(list, ["'self'", "'unsafe-inline'", "fonts.googleapis.com"]),
    CSP_FONT_SRC=(list, ["'self'", "fonts.gstatic.com"]),
    CSP_IMG_SRC=(list, ["'self'", "data:"]),
)

# Read .env file
environ.Env.read_env(BASE_DIR / '.env')

# =============================================================================
# CRITICAL SECURITY SETTINGS
# =============================================================================

# SECRET_KEY - MUST be set via environment variable in production
SECRET_KEY = env('SECRET_KEY')
if not SECRET_KEY:
    raise ValueError("SECRET_KEY environment variable is required")

# DEBUG - NEVER True in production
DEBUG = env('DEBUG')

# Restrictive ALLOWED_HOSTS
ALLOWED_HOSTS = env('ALLOWED_HOSTS')
if not ALLOWED_HOSTS and not DEBUG:
    raise ValueError("ALLOWED_HOSTS must be set in production")

# HTTPS enforcement in production
SECURE_SSL_REDIRECT = env('SECURE_SSL_REDIRECT')
SECURE_HSTS_SECONDS = env('SECURE_HSTS_SECONDS')
SECURE_HSTS_INCLUDE_SUBDOMAINS = env('SECURE_HSTS_INCLUDE_SUBDOMAINS')
SECURE_HSTS_PRELOAD = env('SECURE_HSTS_PRELOAD')
SECURE_CONTENT_TYPE_NOSNIFF = env('SECURE_CONTENT_TYPE_NOSNIFF')
SECURE_BROWSER_XSS_FILTER = env('SECURE_BROWSER_XSS_FILTER')
SECURE_REFERRER_POLICY = env('SECURE_REFERRER_POLICY')

# Proxy detection (for load balancers)
if env('SECURE_PROXY_SSL_HEADER'):
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# X-Frame-Options - clickjacking protection
X_FRAME_OPTIONS = 'DENY'

# Cookies security - default to secure
SESSION_COOKIE_SECURE = env('SESSION_COOKIE_SECURE')
CSRF_COOKIE_SECURE = env('CSRF_COOKIE_SECURE')
SESSION_COOKIE_HTTPONLY = True
CSRF_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = env.str('SESSION_COOKIE_SAMESITE', default='Strict')
CSRF_COOKIE_SAMESITE = env.str('CSRF_COOKIE_SAMESITE', default='Strict')
SESSION_COOKIE_AGE = env('SESSION_COOKIE_AGE')

# CSRF additional security
CSRF_COOKIE_NAME = env.str('CSRF_COOKIE_NAME', default='csrftoken')
CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'
CSRF_TRUSTED_ORIGINS = env('CSRF_TRUSTED_ORIGINS')

# =============================================================================
# APPLICATION DEFINITION
# =============================================================================

INSTALLED_APPS = [
    'jazzmin',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'whitenoise.runserver_nostatic',
    'django.contrib.staticfiles',
    'django.contrib.humanize',

    # Security apps
    'corsheaders',
    'django_extensions',
    'django_ratelimit',  # Rate limiting

    # Authentication
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',

    # Development only
    *(['debug_toolbar'] if DEBUG else []),

    # Local apps
    'ksiegowosc',

    # Monitoring
    'health_check',
    'health_check.db',
    'health_check.cache',
    'health_check.storage',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    *(['debug_toolbar.middleware.DebugToolbarMiddleware'] if DEBUG else []),
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    # Custom security middleware (add if you created them)
    # 'ksiegowosc.middleware.security.SecurityMiddleware',
    # 'ksiegowosc.middleware.security.LoginSecurityMiddleware',
    # 'ksiegowosc.middleware.security.AdminSecurityMiddleware',
    # 'ksiegowosc.middleware.security.ContentSecurityPolicyMiddleware',
]

ROOT_URLCONF = 'fakturownia.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'ksiegowosc', 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            # Additional template security
            'string_if_invalid': '' if not DEBUG else 'INVALID_VARIABLE:%s',
        },
    },
]

WSGI_APPLICATION = 'fakturownia.wsgi.application'

# =============================================================================
# DATABASE SECURITY
# =============================================================================

# Use django-environ's db() method for database URL parsing
DATABASES = {
    'default': env.db()
}

# Additional database security settings
if 'postgresql' in env('DATABASE_URL', default=''):
    DATABASES['default'].update({
        'CONN_MAX_AGE': env('DB_CONN_MAX_AGE'),
        'CONN_HEALTH_CHECKS': env('DB_CONN_HEALTH_CHECKS'),
        'OPTIONS': {
            'sslmode': env('DB_SSLMODE'),
            'connect_timeout': 10,
        }
    })

# =============================================================================
# PASSWORD VALIDATION - STRENGTHENED
# =============================================================================

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': env('AUTH_PASSWORD_MIN_LENGTH'),
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Additional auth settings
LOGIN_ATTEMPTS_LIMIT = env('ACCOUNT_LOGIN_ATTEMPTS_LIMIT')
LOGIN_ATTEMPTS_TIMEOUT = env('ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT')

# =============================================================================
# INTERNATIONALIZATION
# =============================================================================

LANGUAGE_CODE = env('LANGUAGE_CODE')
TIME_ZONE = env('TIME_ZONE')
USE_I18N = True
USE_TZ = True

# =============================================================================
# STATIC FILES & MEDIA - SECURED
# =============================================================================

STATIC_URL = '/static/'
STATIC_ROOT = env.str('STATIC_ROOT', default=os.path.join(BASE_DIR, 'staticfiles'))

MEDIA_URL = '/media/'
MEDIA_ROOT = env.str('MEDIA_ROOT', default=os.path.join(BASE_DIR, 'media'))

# WhiteNoise with compression and cache
STATICFILES_STORAGE = env.str('STATICFILES_STORAGE', default='whitenoise.storage.CompressedManifestStaticFilesStorage')
WHITENOISE_USE_FINDERS = DEBUG
WHITENOISE_AUTOREFRESH = DEBUG
WHITENOISE_MAX_AGE = env('WHITENOISE_MAX_AGE')
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'zip', 'gz', 'tgz', 'bz2', 'tbz', 'xz', 'br']

# File upload security
FILE_UPLOAD_MAX_MEMORY_SIZE = env('FILE_UPLOAD_MAX_MEMORY_SIZE')
DATA_UPLOAD_MAX_MEMORY_SIZE = env('DATA_UPLOAD_MAX_MEMORY_SIZE')
DATA_UPLOAD_MAX_NUMBER_FIELDS = env('DATA_UPLOAD_MAX_NUMBER_FIELDS')
FILE_UPLOAD_PERMISSIONS = 0o644

# Allowed file extensions
ALLOWED_FILE_EXTENSIONS = ['.pdf', '.jpg', '.jpeg', '.png', '.gif', '.doc', '.docx', '.xls', '.xlsx']
MAX_UPLOAD_SIZE = 10 * 1024 * 1024  # 10 MB

# =============================================================================
# EMAIL CONFIGURATION - SECURED
# =============================================================================

# Use django-environ's email_url() method if available, otherwise manual config
EMAIL_BACKEND = env.str('EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = env.str('EMAIL_HOST', default='')
EMAIL_PORT = env('EMAIL_PORT')
EMAIL_USE_TLS = env('EMAIL_USE_TLS')
EMAIL_USE_SSL = env('EMAIL_USE_SSL')
EMAIL_HOST_USER = env.str('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = env.str('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = env.str('DEFAULT_FROM_EMAIL', default='noreply@fakturownia.pl')
SERVER_EMAIL = env.str('SERVER_EMAIL', default='server@fakturownia.pl')

# Email security
EMAIL_TIMEOUT = env('EMAIL_TIMEOUT')

# =============================================================================
# CACHE CONFIGURATION - SECURED
# =============================================================================

# Use django-environ's cache_url() method if CACHE_URL is provided
if env.str('CACHE_URL', default=''):
    CACHES = {
        'default': env.cache()
    }
elif env.str('REDIS_URL', default=''):
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.redis.RedisCache',
            'LOCATION': env('REDIS_URL'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'CONNECTION_POOL_KWARGS': {
                    'max_connections': 50,
                    'socket_keepalive': True,
                    'socket_keepalive_options': {},
                },
                'SERIALIZER': 'django_redis.serializers.json.JSONSerializer',
                'COMPRESSOR': 'django_redis.compressors.zlib.ZlibCompressor',
            },
            'KEY_PREFIX': env('CACHE_KEY_PREFIX'),
            'TIMEOUT': env('CACHE_TIMEOUT'),
        }
    }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
            'TIMEOUT': env('CACHE_TIMEOUT'),
        }
    }

# Cache for sessions
SESSION_ENGINE = env.str('SESSION_ENGINE', default='django.contrib.sessions.backends.cached_db')
SESSION_CACHE_ALIAS = 'default'
SESSION_SAVE_EVERY_REQUEST = False

# =============================================================================
# LOGGING - ENHANCED SECURITY
# =============================================================================

LOG_LEVEL = env('LOG_LEVEL')
LOG_FILE = env.str('LOG_FILE', default=None)
SECURITY_LOG_FILE = env.str('SECURITY_LOG_FILE', default=None)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'security': {
            'format': '{levelname} {asctime} SECURITY {module} {funcName} {lineno} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': LOG_LEVEL,
            'class': 'logging.StreamHandler',
            'formatter': 'verbose' if DEBUG else 'simple',
            'filters': ['require_debug_true'] if not DEBUG else [],
        },
        'security_console': {
            'level': 'WARNING',
            'class': 'logging.StreamHandler',
            'formatter': 'security',
        },
        'mail_admins': {
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_false'],
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'mail_admins'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
        'django.security': {
            'handlers': ['security_console', 'mail_admins'],
            'level': 'WARNING',
            'propagate': False,
        },
        'ksiegowosc': {
            'handlers': ['console'],
            'level': LOG_LEVEL,
            'propagate': False,
        },
    },
}

# Add file handlers if paths provided
if LOG_FILE:
    LOGGING['handlers']['file'] = {
        'level': LOG_LEVEL,
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': LOG_FILE,
        'maxBytes': 1024*1024*10,  # 10 MB
        'backupCount': 5,
        'formatter': 'verbose',
        'filters': ['require_debug_false'],
    }
    for logger in ['django', 'ksiegowosc']:
        LOGGING['loggers'][logger]['handlers'].append('file')

if SECURITY_LOG_FILE:
    LOGGING['handlers']['security_file'] = {
        'level': 'WARNING',
        'class': 'logging.handlers.RotatingFileHandler',
        'filename': SECURITY_LOG_FILE,
        'maxBytes': 1024*1024*10,  # 10 MB
        'backupCount': 10,
        'formatter': 'security',
    }
    LOGGING['loggers']['django.security']['handlers'].append('security_file')

# =============================================================================
# SENTRY CONFIGURATION - ENHANCED
# =============================================================================

SENTRY_DSN = env.str('SENTRY_DSN', default=None)

if SENTRY_DSN and not DEBUG:
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration
    from sentry_sdk.integrations.logging import LoggingIntegration
    
    sentry_logging = LoggingIntegration(
        level=logging.INFO,
        event_level=logging.ERROR
    )

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[
            DjangoIntegration(
                transaction_propagate_to_parent_spans=True,
                signals_spans=False,
            ),
            sentry_logging,
        ],
        traces_sample_rate=env('SENTRY_TRACES_SAMPLE_RATE'),
        profiles_sample_rate=env('SENTRY_PROFILES_SAMPLE_RATE'),
        send_default_pii=False,
        environment=env('SENTRY_ENVIRONMENT'),
        release=env.str('SENTRY_RELEASE', default=None),
        before_send=lambda event, hint: event if not DEBUG else None,
    )

# =============================================================================
# JAZZMIN CONFIGURATION - SECURED
# =============================================================================

JAZZMIN_SETTINGS = {
    "site_title": "Fakturownia",
    "site_header": "Fakturownia",
    "site_brand": "Fakturownia",
    "welcome_sign": "Witaj w panelu Fakturowni",
    "copyright": "Fakturownia App",
    "search_model": ["auth.User", "ksiegowosc.Contractor"],

    "topmenu_links": [
        {"name": "Strona główna", "url": "admin:index"},
        {"name": "Dashboard", "url": "admin:ksiegowosc_dashboard", "permissions": ["ksiegowosc.view_monthlysettlement"]},
        {"app": "ksiegowosc"},
    ],

    "usermenu_links": [
        {"name": "Profil", "url": "admin:auth_user_change", "icon": "fas fa-user"},
        {"name": "Zmień hasło", "url": "admin:password_change", "icon": "fas fa-key"},
    ],

    "order_with_respectto": ["ksiegowosc", "auth"],
    "show_sidebar": True,
    "navigation_expanded": True,
    "hide_apps": [],
    "hide_models": [],

    "icons": {
        "auth": "fas fa-users-cog",
        "auth.user": "fas fa-user",
        "auth.Group": "fas fa-users",
        "ksiegowosc": "fas fa-file-invoice-dollar",
        "ksiegowosc.companyinfo": "fas fa-building",
        "ksiegowosc.contractor": "fas fa-address-book",
        "ksiegowosc.invoice": "fas fa-file-invoice",
        "ksiegowosc.monthlysettlement": "fas fa-calculator",
        "ksiegowosc.yearlysettlement": "fas fa-calendar-alt",
        "ksiegowosc.zusrates": "fas fa-coins",
        "ksiegowosc.payment": "fas fa-money-bill-wave",
        "ksiegowosc.purchaseinvoice": "fas fa-shopping-cart",
        "ksiegowosc.expensecategory": "fas fa-tags",
    },

    "show_ui_builder": False,
    "changeform_format": "horizontal_tabs",
    "related_modal_active": False,

    "custom_links": {
        "ksiegowosc": [{
            "name": "Dashboard z wykresami", 
            "url": "admin:ksiegowosc_dashboard",
            "icon": "fas fa-chart-pie",
            "permissions": ["ksiegowosc.view_monthlysettlement"]
        }]
    },

    "custom_css": None,
    "custom_js": None,
    "use_google_fonts_cdn": env('USE_GOOGLE_FONTS_CDN'),
    "show_ui_builder": False,
    "language_chooser": False,
}

# =============================================================================
# CORS SETTINGS - RESTRICTED
# =============================================================================

CORS_ALLOWED_ORIGINS = env('CORS_ALLOWED_ORIGINS')
CORS_ALLOW_CREDENTIALS = env('CORS_ALLOW_CREDENTIALS')
CORS_PREFLIGHT_MAX_AGE = 86400  # 24 hours

# =============================================================================
# RATE LIMITING
# =============================================================================

RATELIMIT_ENABLE = env('RATELIMIT_ENABLE')
RATELIMIT_USE_CACHE = 'default'

# =============================================================================
# ADMIN SECURITY
# =============================================================================

# Randomized admin URL - set via environment variable
ADMIN_URL = env('ADMIN_URL')

# Additional admin restrictions
ADMIN_IP_WHITELIST = env('ADMIN_IP_WHITELIST')
ADMIN_FORCE_ALLAUTH = env.bool('ADMIN_FORCE_ALLAUTH', default=True)

# =============================================================================
# HEALTH CHECK - SECURED
# =============================================================================

HEALTH_CHECK = {
    'DEFAULT_TIMEOUT': 5,
    'DISK_USAGE_MAX': env('HEALTH_CHECK_DISK_USAGE_MAX'),
    'MEMORY_MIN': env('HEALTH_CHECK_MEMORY_MIN'),
}

# =============================================================================
# BACKUP SETTINGS
# =============================================================================

DBBACKUP_STORAGE = env.str('DBBACKUP_STORAGE', default='django.core.files.storage.FileSystemStorage')
DBBACKUP_STORAGE_OPTIONS = env.json('DBBACKUP_STORAGE_OPTIONS', default={'location': '/var/backups/fakturownia'})

# Encryption for backups
DBBACKUP_GPG_RECIPIENT = env.str('DBBACKUP_GPG_RECIPIENT', default=None)

# =============================================================================
# ALLAUTH SECURITY CONFIGURATION
# =============================================================================

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1

# Allauth security settings
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = env('ACCOUNT_EMAIL_REQUIRED')
ACCOUNT_EMAIL_VERIFICATION = env('ACCOUNT_EMAIL_VERIFICATION')
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_LOGIN_ATTEMPTS_LIMIT = env('ACCOUNT_LOGIN_ATTEMPTS_LIMIT')
ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT = env('ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT')
ACCOUNT_LOGOUT_ON_PASSWORD_CHANGE = True
ACCOUNT_SESSION_REMEMBER = False
ACCOUNT_PASSWORD_MIN_LENGTH = env('ACCOUNT_PASSWORD_MIN_LENGTH')

# Social account settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': ['profile', 'email'],
        'AUTH_PARAMS': {'access_type': 'online'},
        'VERIFIED_EMAIL': True,
    }
}

# Redirects
LOGIN_REDIRECT_URL = '/admin/'
LOGOUT_REDIRECT_URL = '/admin/login/'
LOGIN_URL = '/accounts/login/'

# =============================================================================
# CUSTOM SETTINGS FOR FAKTUROWNIA
# =============================================================================

INVOICE_NUMBER_FORMAT = env('INVOICE_NUMBER_FORMAT')
DEFAULT_PAYMENT_DAYS = env('DEFAULT_PAYMENT_DAYS')
MAX_INVOICE_PDF_SIZE = env('MAX_INVOICE_PDF_SIZE')

# =============================================================================
# CONTENT SECURITY POLICY
# =============================================================================

CSP_DEFAULT_SRC = env('CSP_DEFAULT_SRC')
CSP_SCRIPT_SRC = env('CSP_SCRIPT_SRC')
CSP_STYLE_SRC = env('CSP_STYLE_SRC')
CSP_FONT_SRC = env('CSP_FONT_SRC')
CSP_IMG_SRC = env('CSP_IMG_SRC')

# =============================================================================
# DEVELOPMENT OVERRIDES
# =============================================================================

if DEBUG:
    # Disable HTTPS security in development
    SECURE_SSL_REDIRECT = False
    SECURE_HSTS_SECONDS = 0
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_SECURE = False
    
    # Email in console
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    
    # Development tools
    SHELL_PLUS_PRINT_SQL = True
    INTERNAL_IPS = ['127.0.0.1', 'localhost']
    
    # Relaxed rate limiting
    RATELIMIT_ENABLE = False

# =============================================================================
# FINAL SECURITY CHECKS
# =============================================================================

# Check if all critical settings are set in production
if not DEBUG:
    required_settings = ['SECRET_KEY', 'ALLOWED_HOSTS']
    missing_settings = []
    
    for setting in required_settings:
        if not locals().get(setting):
            missing_settings.append(setting)
    
    if missing_settings:
        raise ValueError(f"Missing required settings in production: {missing_settings}")

# Additional DEFAULT_AUTO_FIELD
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'